on:
  push:
    branches:
      - "33-Scaffold-and-use-ECR"
permissions:
  pull-requests: write
name: ‚ú® Build Test üßê
jobs:
  TF-Apply:
    name: üèóÔ∏è Apply Infra
    runs-on: ubuntu-latest
    # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
    outputs:
      apigw: ${{steps.APIGW.outputs.NEXT_PUBLIC_APIGW}}
      registry_url: ${{steps.APIGW.outputs.REGISTRY_URL}}
    steps:
      - name: Check Out
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.9.2
      - name: Look around nd Init üëÅÔ∏èüëÅÔ∏è
        run: |
          echo Looking around üëÅÔ∏èüëÅÔ∏è
          ls
          cd terraform
          echo Looking around üëÅÔ∏èüëÅÔ∏è
          ls
          terraform init
      - name: üèóÔ∏è Terraform Apply
        run: |
          cd terraform
          terraform apply -var="bucket-name=${{ secrets.S3_BUCKET }}" -var="db-name=${{ secrets.DB_NAME }}" -var="db-username=${{ secrets.DB_USER }}" -auto-approve
      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}
      - name: Fetch API GW
        id: APIGW
        run: |
          cd terraform
          echo "NEXT_PUBLIC_APIGW=$(terraform output -raw api-route)" >> $GITHUB_OUTPUT
          echo "REGISTRY_URL=$(terraform output -raw ecr-push-url)" >> $GITHUB_OUTPUT
  web-deploy:
    name: üí´ Deploy
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    needs: ["TF-Apply"]
    steps:
      - name: Check Out
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Use Node.js
        uses: actions/setup-node@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-west-2
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: üò™ Installing Dependencies
        run: |
          cd web
          npm install

      - name: ‚öóÔ∏è Write env variables
        run: |
          cd web
          echo "NEXT_PUBLIC_APIGW=${{needs.TF-Apply.outputs.apigw}}" > .env

      - name: üî® Build Static Project
        run: |
          cd web
          STATIC=1 npm run build

      - name: üöÄ Upload Package
        run: |
          aws s3 sync ./web/out s3://${{ secrets.S3_BUCKET }}/ --region us-west-2
          aws s3 sync ./web/out s3://${{ secrets.S3_BUCKET }}-failover/ --region us-west-2

        # https://octopus.com/blog/githubactions-docker-ecr
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üê≥ Build Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecr-ex-config
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          docker build --output type=local,dest=./alpine_storefront -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "artifact-url=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: üê≥ Build Image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./web/
      #     file: ./web/Dockerfile
      #     push: true # if we wanted to push the image to DockerHub or a local registry
      #     tags: ecr-ex-config
      #     # cache-to: type=local,dest=user/app:cache
      #     outputs: type=local,dest=./alpine_storefront,type=image,dest=${{needs.TF-Apply.outputs.registry_url}}/ecr-ex-config:latest
      #     secret-envs: NEXT_PUBLIC_APIGW=${{needs.TF-Apply.outputs.apigw}}

      - name: Move Image to copyable location
        run: |
          stat ./alpine_storefront
          tar -zcf alpine_storefront.tar.gz ./alpine_storefront
          sudo cp ./alpine_storefront.tar.gz /home/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: storefront_image
          path: /home/alpine_storefront.tar.gz
          overwrite: true
          if-no-files-found: error

      - name: Echo artifact url and send to SSM parameter
        run: |
          echo ARTIFACT_URL=${{steps.artifact-upload-step.outputs.artifact-url}}
          aws ssm put-parameter --name "ecr_artifact_url" --value "${{steps.artifact-upload-step.outputs.artifact-url}}" --type String  --overwrite
