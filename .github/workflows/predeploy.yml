on:
  pull_request:
    branches:
      - "**"
permissions:
  pull-requests: write
name: üå± Plan, Build üß™
jobs:
  TF-Apply:
    name: üèóÔ∏è Plan Infra
    runs-on: ubuntu-latest
    # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
    outputs:
      apigw: ${{steps.APIGW.outputs.NEXT_PUBLIC_APIGW}}
    steps:
      - name: Check Out
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.11.1"
      - name: Look around nd Init üëÅÔ∏èüëÅÔ∏è
        run: |
          echo Looking around üëÅÔ∏èüëÅÔ∏è
          ls
          cd terraform
          echo Looking around üëÅÔ∏èüëÅÔ∏è
          ls
          terraform init
      - name: üèóÔ∏è Terraform Plan
        run: |
          cd terraform
          terraform plan -refresh-only -var "bucket-name=${{ secrets.S3_BUCKET }}" -var "db-name=${{ secrets.DB_NAME }}" -var "db-username=${{ secrets.DB_USER }}" # -auto-approve
        id: plan
      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}
      - name: Fetch API GW
        id: APIGW
        run: |
          cd terraform
          echo "NEXT_PUBLIC_APIGW=$(terraform output -raw api-route)" >> $GITHUB_OUTPUT
  web-deploy:
    name: üí´ Build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    needs: ["TF-Apply"]
    steps:
      - name: Check Out
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Use Node.js
        uses: actions/setup-node@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-west-2
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: üò™ Installing Dependencies
        run: |
          cd web
          npm install

      - name: ‚öóÔ∏è Write env variables
        run: |
          cd web
          echo "NEXT_PUBLIC_APIGW=${{needs.TF-Apply.outputs.apigw}}" > .env

      - name: üî® Build Static Project
        run: |
          cd web
          STATIC=1 npm run build

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: üê≥ Build Image
        env:
          ECR_REPOSITORY: ecr-ex-config
          IMAGE_TAG: latest
        run: |
          echo "Building a docker image"
          cd web
          docker build -t ${{steps.login-ecr.outputs.registry}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}} .
