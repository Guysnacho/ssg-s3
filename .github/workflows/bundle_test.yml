on:
  push:
    branches:
      - "34-Throw-it-in-a-box!"
permissions:
  pull-requests: write
name: ✨ Build Test 🧐
jobs:
  TF-Apply:
    name: 🏗️ Apply Infra
    runs-on: ubuntu-latest
    # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
    outputs:
      apigw: ${{steps.APIGW.outputs.NEXT_PUBLIC_APIGW}}
    steps:
      - name: Check Out
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.9.2
      - name: Look around nd Init 👁️👁️
        run: |
          echo Looking around 👁️👁️
          ls
          cd terraform
          echo Looking around 👁️👁️
          ls
          terraform init
      - name: 🏗️ Terraform Apply
        run: |
          cd terraform
          terraform apply -var="bucket-name=${{ secrets.S3_BUCKET }}" -var="db-name=${{ secrets.DB_NAME }}" -var="db-username=${{ secrets.DB_USER }}" -auto-approve
      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}
      - name: Fetch API GW
        id: APIGW
        run: |
          cd terraform
          echo "NEXT_PUBLIC_APIGW=$(terraform output -raw api-route)" >> $GITHUB_OUTPUT
  web-deploy:
    name: 💫 Deploy
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    needs: ["TF-Apply"]
    steps:
      - name: Check Out
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Use Node.js
        uses: actions/setup-node@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-west-2
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: 😪 Installing Dependencies
        run: |
          cd web
          npm install

      - name: ⚗️ Write env variables
        run: |
          cd web
          echo "NEXT_PUBLIC_APIGW=${{needs.TF-Apply.outputs.apigw}}" > .env

      - name: 🔨 Build Static Project
        run: |
          cd web
          STATIC=1 npm run build

      - name: 🚀 Upload Package
        run: |
          aws s3 sync ./web/out s3://${{ secrets.S3_BUCKET }}/ --region us-west-2
          aws s3 sync ./web/out s3://${{ secrets.S3_BUCKET }}-failover/ --region us-west-2

      - name: 🐳 Build Image
        uses: docker/build-push-action@v6
        with:
          context: ./web/
          file: ./web/Dockerfile
          push: false # if we wanted to push the image to DockerHub
          tags: user/app:latest
          # cache-to: type=local,dest=user/app:cache
          outputs: type=local,dest=./alpine_storefront
          secret-envs: NEXT_PUBLIC_APIGW=${{needs.TF-Apply.outputs.apigw}}
        continue-on-error: true

      - name: 🌩️ Upload Image
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          overwrite: true
          name: storefront_img
          path: ./web/alpine_storefront
